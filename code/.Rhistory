betas <- coefficients(fit,s = best_l)
plot(betas[-1],pch=16)
points(dados$beta,pch=16,col=4)
plot(betas[-1],pch=16,xlim = c(0,6))
points(dados$beta,pch=16,col=4)
?cv.glmnet
library(tidyverse)
library(glmnet)
gera_dados <- function(n=1000,d=500)
{
beta <- c(runif(5),rep(0,d-5))
X <- matrix(rnorm(n*d),n,d)
y <- X%*%beta+rnorm(n)
return(list(X=X,y=y,beta=beta))
}
set.seed(0)
dados <- gera_dados(n = 500)
fit <- cv.glmnet(x = dados$X,y = dados$y,gamma = 0)
plot(fit)
dados_teste <- gera_dados()
eqm <- apply(as.matrix(fit$lambda),1,function(x)
{
pred <- predict(fit,newx = dados_teste$X,
s = x)
return(mean(pred-dados_teste$y)^2)
})
plot(fit$lambda,eqm,type="l")
best_l <- fit$lambda[which.min(eqm)]
betas <- coefficients(fit,s = best_l)
plot(betas[-1],pch=16)
points(dados$beta,pch=16,col=4)
plot(betas[-1],pch=16,xlim = c(0,6))
points(dados$beta,pch=16,col=4)
best_l <- fit$lambda.min
best_l
betas <- coefficients(fit,s = best_l)
plot(betas[-1],pch=16)
points(dados$beta,pch=16,col=4)
plot(betas[-1],pch=16,xlim = c(0,6))
points(dados$beta,pch=16,col=4)
plot(betas[-1],pch=16,xlim = c(0,5))
points(dados$beta,pch=16,col=4)
betas[-1]
betas[-1][5]
dados$beta[5]
plot(betas[-1],pch=16,xlim = c(0,5),ylim = c(-1,1))
points(dados$beta,pch=16,col=4)
plot(fit$lambda,eqm,type="l")
dados_teste <- gera_dados(n=100000
dados_teste <- gera_dados(n=100000)
eqm <- apply(as.matrix(fit$lambda),1,function(x)
{
pred <- predict(fit,newx = dados_teste$X,
s = x)
return(mean(pred-dados_teste$y)^2)
})
plot(fit$lambda,eqm,type="l")
rm(list=ls())
library(tidyverse)
library(glmnet)
gera_dados <- function(n=1000,d=500)
{
beta <- c(runif(5),rep(0,d-5))
X <- matrix(rnorm(n*d),n,d)
y <- X%*%beta+rnorm(n)
return(list(X=X,y=y,beta=beta))
}
set.seed(0)
dados <- gera_dados(n = 500)
fit <- cv.glmnet(x = dados$X,y = dados$y,gamma = 0)
plot(fit)
dados_teste <- gera_dados(n=100000)
eqm <- apply(as.matrix(fit$lambda),1,function(x)
{
pred <- predict(fit,newx = dados_teste$X,
s = x)
return(mean((pred-dados_teste$y)^2))
})
dados_teste <- gera_dados(n=10000)
eqm <- apply(as.matrix(fit$lambda),1,function(x)
{
pred <- predict(fit,newx = dados_teste$X,
s = x)
return(mean((pred-dados_teste$y)^2))
})
plot(fit$lambda,eqm,type="l")
best_l <- fit$lambda[which.min(eqm)]
betas <- coefficients(fit,s = best_l)
gc()
best_l <- fit$lambda[which.min(eqm)]
betas <- coefficients(fit,s = best_l)
plot(betas[-1],pch=16)
points(dados$beta,pch=16,col=4)
plot(betas[-1],pch=16,xlim = c(0,6))
points(dados$beta,pch=16,col=4)
fit$lambda
min(fit$lambda)
max(fit$lambda)
X <- dados$X
dim(X)
y <- dados$y
I<-diag(rep(1,ncol(X)))
I[1,1]<-0
beta_estimates <- list()
lambda <- fit$lambda
lambda
for (i in 1:length(lambda)) {
beta_estimates[[i]]<-solve(t(X)%*%X+lambda[i]*I)%*%(t(X)%*%y)
}
i
a <- beta_estimates[[i]]
a
dfim(a)
dim(a)
a
a[1:10,]
dados$beta[1:5]
solve(t(X)%*%X+10000*I)%*%(t(X)%*%y)
a <- solve(t(X)%*%X+10000*I)%*%(t(X)%*%y)
a[1:10,]
I<-diag(rep(1,ncol(X)))
a <- solve(t(X)%*%X+10000*I)%*%(t(X)%*%y)
plot(a[1:5,],dados$beta[1:5])
a <- solve(t(X)%*%X+1*I)%*%(t(X)%*%y)
plot(a[1:5,],dados$beta[1:5])
a <- solve(t(X)%*%X+0.1*I)%*%(t(X)%*%y)
plot(a[1:5,],dados$beta[1:5])
a[1:100,]
plot(a[1:100,])
plot(a[1:1000,])
plot(a[1:500])
a <- solve(t(X)%*%X+0.3*I)%*%(t(X)%*%y)
plot(a[1:500])
a <- solve(t(X)%*%X+0.9*I)%*%(t(X)%*%y)
plot(a[1:500])
a <- solve(t(X)%*%X+3*I)%*%(t(X)%*%y)
plot(a[1:500])
a <- solve(t(X)%*%X+30*I)%*%(t(X)%*%y)
plot(a[1:500])
a <- solve(t(X)%*%X+500*0.1*I)%*%(t(X)%*%y)
plot(a[1:500])
library(ggplot2)
devtools::install_github("jtrecenti/vacinaBrasil")
devtools::install_github("jtrecenti/vacinaBrasil")
GITHUB_PAT
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("jtrecenti/vacinaBrasil")
install.packages("cli")
install.packages("cli")
devtools::install_github("jtrecenti/vacinaBrasil")
github_pat(1)
devtools::github_pat(1)
library(devtools)
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
devtools::install_github("jtrecenti/vacinaBrasil")
#devtools::install_github("jtrecenti/vacinaBrasil")
library(vacinaBrasil)
fonte <- stringr::str_glue(
"Fonte:\n",
"População: PNAD Contínua\n",
"Vacinação: Open DataSus"
)
dose <- datasus_idade_sexo_dose %>%
dplyr::select(sexo, idade, tipo = dose, n) %>%
dplyr::filter(tipo %in% c("1ª Dose", "2ª Dose"))
library(ggplot2)
#devtools::install_github("jtrecenti/vacinaBrasil")
library(vacinaBrasil)
fonte <- stringr::str_glue(
"Fonte:\n",
"População: PNAD Contínua\n",
"Vacinação: Open DataSus"
)
dose <- datasus_idade_sexo_dose %>%
dplyr::select(sexo, idade, tipo = dose, n) %>%
dplyr::filter(tipo %in% c("1ª Dose", "2ª Dose"))
dose
datasus_idade_sexo_dose
dados
## Acessa link do arquivo
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
link <- ckanr::package_search("vacina") %>%
purrr::pluck("results", 1, "resources") %>%
purrr::keep(~length(.x$mimetype) > 0 && .x$mimetype == "text/csv") %>%
purrr::pluck(1, "description") %>%
stringr::str_extract("(?<=Dados Completos\\]\\()[^\\)]+") %>%
stringr::str_squish()
## Acessa link do arquivo
f <- fs::file_temp("vacinas", ext = ".csv")
httr::GET(link, httr::write_disk(f, TRUE), httr::progress())
setwd("/mnt/HD2TB/Dropbox/Izbicki/Research/UFSCar/corona/vacinacao")
library(tidyverse)
library(lubridate)
library(plotly)
library(scales)
library(ggthemes)
utils::globalVariables(unique(c(
"CLASSI_FIN", "DT_INTERNA", "DT_NOTIFIC",
"DT_SIN_PRI", "NU_IDADE_N", "SG_UF_NOT"
)))
pre_process <- function(dados, dia, semanas_trunca) {
dados %>%
dplyr::select(DT_INTERNA, DT_NOTIFIC, DT_SIN_PRI, SG_UF_NOT, NU_IDADE_N, CLASSI_FIN) %>%
dplyr::filter(!is.na(NU_IDADE_N), !is.na(DT_INTERNA)) %>%
dplyr::mutate(
DT_NOTIFIC = as.Date(DT_NOTIFIC, format = "%d/%m/%Y"),
DT_INTERNA = as.Date(DT_INTERNA, format = "%d/%m/%Y"),
DT_SIN_PRI = as.Date(DT_SIN_PRI, format = "%d/%m/%Y")
) %>%
dplyr::filter(
DT_INTERNA > as.Date("2020-12-23"),
#DT_INTERNA > as.Date("2020-03-01"),
DT_INTERNA <= dia - semanas_trunca * 7
) %>%
dplyr::mutate(idade_cat = cut(NU_IDADE_N, c(0,40,60,70,80,90,120), right = FALSE),
idade_cat2 = cut(NU_IDADE_N, c(0,30,40,60,70,75,85,120), right = FALSE)) %>%
tibble::as_tibble()
}
#' Update SRAG data
#'
#' @export
update_srag_data <- function() {
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
arqs <- ckanr::package_search("srag 20")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~.x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 1, "url")
arqs_new <- arqs %>%
stringr::str_subset("INFLUD21",negate = TRUE)
dia <- lubridate::dmy(basename(arqs_new))
semanas_trunca <- 2
# demora
dados <- purrr::map(arqs, data.table::fread)
# rapido
dados_todos <- purrr::map_dfr(
dados, pre_process,
dia = dia, semanas_trunca = semanas_trunca
)
dados_todos
}
dados <- update_srag_data()
dados <- dados %>%
filter(SG_UF_NOT%in% "SP")
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_normalizados_media_movel=
zoo::rollapply(numero_casos_normalizados,14,mean,align='right',fill=NA),
numero_casos_media_movel=
zoo::rollapply(numero_casos,14,mean,align='right',fill=NA)) %>%
filter(!is.na(numero_casos_normalizados_media_movel))
dados_resumo_interna <- dados_resumo_interna %>%
group_by(DT_INTERNA) %>%
mutate(percentage=numero_casos_media_movel/sum(numero_casos_media_movel))
ggplot(dados_resumo_interna)+
geom_line(aes(x=DT_INTERNA,y=numero_casos_normalizados_media_movel,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Número de novos casos de SRAG \n  (média móvel padronizada por idade)")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_colour_colorblind(name = "Faixa Etária")+
expand_limits(y = 0)
pre_process <- function(dados, dia, semanas_trunca) {
dados %>%
dplyr::filter(!is.na(NU_IDADE_N), !is.na(DT_INTERNA),CLASSI_FIN==5) %>%
dplyr::select(DT_INTERNA, DT_NOTIFIC, DT_SIN_PRI, SG_UF_NOT, NU_IDADE_N, CLASSI_FIN) %>%
dplyr::mutate(
DT_NOTIFIC = as.Date(DT_NOTIFIC, format = "%d/%m/%Y"),
DT_INTERNA = as.Date(DT_INTERNA, format = "%d/%m/%Y"),
DT_SIN_PRI = as.Date(DT_SIN_PRI, format = "%d/%m/%Y")
) %>%
dplyr::filter(
DT_INTERNA > as.Date("2020-12-23"),
#DT_INTERNA > as.Date("2020-03-01"),
DT_INTERNA <= dia - semanas_trunca * 7
) %>%
dplyr::mutate(idade_cat = cut(NU_IDADE_N, c(0,40,60,70,80,90,120), right = FALSE),
idade_cat2 = cut(NU_IDADE_N, c(0,30,40,60,70,75,85,120), right = FALSE)) %>%
tibble::as_tibble()
}
#' Update SRAG data
#'
#' @export
update_srag_data <- function() {
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
arqs <- ckanr::package_search("srag 20")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~.x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 1, "url")
arqs_new <- arqs %>%
stringr::str_subset("INFLUD21",negate = TRUE)
dia <- lubridate::dmy(basename(arqs_new))
semanas_trunca <- 2
# demora
dados <- purrr::map(arqs, data.table::fread)
# rapido
dados_todos <- purrr::map_dfr(
dados, pre_process,
dia = dia, semanas_trunca = semanas_trunca
)
dados_todos
}
dados <- update_srag_data()
dados <- dados %>%
filter(SG_UF_NOT%in% "SP")
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_normalizados_media_movel=
zoo::rollapply(numero_casos_normalizados,14,mean,align='right',fill=NA),
numero_casos_media_movel=
zoo::rollapply(numero_casos,14,mean,align='right',fill=NA)) %>%
filter(!is.na(numero_casos_normalizados_media_movel))
dados_resumo_interna <- dados_resumo_interna %>%
group_by(DT_INTERNA) %>%
mutate(percentage=numero_casos_media_movel/sum(numero_casos_media_movel))
ggplot(dados_resumo_interna)+
geom_line(aes(x=DT_INTERNA,y=numero_casos_normalizados_media_movel,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Número de novos casos de SRAG \n  (média móvel padronizada por idade)")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_colour_colorblind(name = "Faixa Etária")+
expand_limits(y = 0)
ggplot(dados_resumo_interna)+
geom_line(aes(x=DT_INTERNA,y=percentage,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Porcentagem de novos casos de SRAG \n por faixa etária (média móvel)")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_colour_colorblind(name = "Faixa Etária")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
pre_process <- function(dados, dia, semanas_trunca) {
dados %>%
dplyr::filter(!is.na(NU_IDADE_N), !is.na(DT_INTERNA),CLASSI_FIN==5) %>%
dplyr::select(DT_INTERNA, DT_NOTIFIC, DT_SIN_PRI, SG_UF_NOT, NU_IDADE_N, CLASSI_FIN) %>%
dplyr::mutate(
DT_NOTIFIC = as.Date(DT_NOTIFIC, format = "%d/%m/%Y"),
DT_INTERNA = as.Date(DT_INTERNA, format = "%d/%m/%Y"),
DT_SIN_PRI = as.Date(DT_SIN_PRI, format = "%d/%m/%Y")
) %>%
dplyr::filter(
DT_INTERNA > as.Date("2020-03-01"),
DT_INTERNA <= dia - semanas_trunca * 7
) %>%
dplyr::mutate(idade_cat = cut(NU_IDADE_N, c(0,40,60,70,80,90,120), right = FALSE),
idade_cat2 = cut(NU_IDADE_N, c(0,30,40,60,70,75,85,120), right = FALSE)) %>%
tibble::as_tibble()
}
#' Update SRAG data
#'
#' @export
update_srag_data <- function() {
ckanr::ckanr_setup("https://opendatasus.saude.gov.br")
arqs <- ckanr::package_search("srag 20")$results %>%
purrr::map("resources") %>%
purrr::map(purrr::keep, ~.x$mimetype == "text/csv") %>%
purrr::map_chr(purrr::pluck, 1, "url")
arqs_new <- arqs %>%
stringr::str_subset("INFLUD21",negate = TRUE)
dia <- lubridate::dmy(basename(arqs_new))
semanas_trunca <- 3
# demora
dados <- purrr::map(arqs, data.table::fread)
# rapido
dados_todos <- purrr::map_dfr(
dados, pre_process,
dia = dia, semanas_trunca = semanas_trunca
)
dados_todos
}
dados_todos <- update_srag_data()
readr::write_rds(dados_todos, "data-raw/dados_SRAG.RDS")
setwd("/mnt/HD2TB/Dropbox/Izbicki/Research/UFSCar/corona/vacinacao/sragData")
readr::write_rds(dados_todos, "data-raw/dados_SRAG.RDS")
setwd("/mnt/HD2TB/Dropbox/Izbicki/Research/UFSCar/corona/vacinacao/efeito_vacinacao/code")
input=list(estado="SP",idade_cat="1",media_movel=7,data_inicio=as.Date("2021-03-01"))
dados <- dados %>%
filter(SG_UF_NOT%in% input$estado)
if(input$idade_cat=="2")
dados$idade_cat <- dados$idade_cat2
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_normalizados_media_movel=
zoo::rollapply(numero_casos_normalizados,
input$media_movel,mean,align='right',fill=NA)) %>%
filter(!is.na(numero_casos_normalizados_media_movel))
g <- ggplot(dados_resumo_interna)+
geom_line(aes(x=DT_INTERNA,y=numero_casos_normalizados_media_movel,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Número de novos casos de internação por SRAG \n  (média móvel padronizada por idade)")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_colour_colorblind(name = "Faixa Etária")+
expand_limits(y = 0)
ggplotly(g,tooltip = c("idade_cat","DT_INTERNA"))  %>%
highlight(on = "plotly_hover", off ="plotly_deselect",
color=c("grey21"),debounce=5)
dados <- dados %>%
filter(SG_UF_NOT%in% input$estado)
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_media_movel=
zoo::rollapply(numero_casos,input$media_movel,
mean,align='right',fill=NA)) %>%
filter(!is.na(numero_casos_media_movel))
dados_resumo_interna <- dados_resumo_interna %>%
group_by(DT_INTERNA) %>%
mutate(percentage=numero_casos_media_movel/sum(numero_casos_media_movel))
g <- ggplot(dados_resumo_interna)+
geom_line(aes(x=DT_INTERNA,y=percentage,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Porcentagem de novos casos de internação por SRAG \n por faixa etária (média móvel)")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_colour_colorblind(name = "Faixa Etária")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggplotly(g,tooltip = c("idade_cat","DT_INTERNA"))  %>%
highlight(on = "plotly_hover", off ="plotly_deselect",
color=c("grey21"),debounce=5)
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_normalizados_media_movel=
zoo::rollapply(numero_casos_normalizados,input$media_movel,
mean,align='right',fill=NA))
dados_variacao <- dados_resumo_interna %>%
select(idade_cat,DT_INTERNA,numero_casos_normalizados_media_movel) %>%
filter(DT_INTERNA>=input$data_inicio) %>%
group_by(idade_cat) %>%
mutate(Variacao = numero_casos_normalizados_media_movel/first(numero_casos_normalizados_media_movel)-1)
g <- ggplot(dados_variacao)+
geom_hline(yintercept = 0, size=2)+
geom_line(aes(x=DT_INTERNA,y=Variacao,color=idade_cat),size=1) +
theme_bw()+
theme(axis.text.x = element_text(size=18), legend.text = element_text(size = 14),legend.title = element_text( size = 16,face="bold"),axis.title=element_text(size=18),plot.title = element_text(size=12))+
ylab("Variação no número de novos casos de internação por SRAG \n em relação à data de início")+
xlab("")+
labs(title = "Fonte: Opendatasus. Dados sujeitos a alterações.")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
scale_colour_colorblind(name = "Faixa Etária")
ggplotly(g,tooltip = c("idade_cat","DT_NOTIFIC"))  %>%
highlight(on = "plotly_hover", off ="plotly_deselect",
color=c("grey21"),debounce=5)
input=list(estado="SP",idade_cat="1",media_movel=7,data_inicio=as.Date("2021-03-01"))
#tmpfile <- tempfile(fileext = ".rds")
#download.file(
#  "https://github.com/jtrecenti/sragData/raw/master/data-raw/dados_SRAG.RDS",
#  tmpfile
#)
#dados <- readr::read_rds(tmpfile)
#file.remove(tmpfile)
dados <- readr::read_rds("../../sragData/data-raw/dados_SRAG.RDS")
dados <- dados %>%
filter(SG_UF_NOT%in% input$estado)
if(input$idade_cat=="2")
dados$idade_cat <- dados$idade_cat2
dados_resumo_interna <- dados  %>%
filter(!is.na(idade_cat)) %>%
group_by(idade_cat,DT_INTERNA) %>%
summarise(numero_casos=n()) %>%
ungroup() %>%
complete(idade_cat,DT_INTERNA,fill = list(numero_casos=0)) %>%
group_by(idade_cat) %>%
arrange(DT_INTERNA) %>%
mutate(numero_casos_normalizados=numero_casos/sum(numero_casos),
numero_casos_normalizados_media_movel=
zoo::rollapply(numero_casos_normalizados,
input$media_movel,mean,align='right',fill=NA)) %>%
filter(!is.na(numero_casos_normalizados_media_movel))
input$media_movel
